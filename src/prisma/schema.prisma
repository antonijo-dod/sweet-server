// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum role {
  ADMIN
  USER
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     role     @default(USER)
  author   Recipe[]
}

model Recipe {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  name            String
  slug            String                @unique
  description     String?
  featuredImage   Image?                @relation(fields: [featuredImageId], references: [id])
  featuredImageId Int?                  
  recipeId        Int?                  @unique
  galleryImages   ImageOnRecipe[]
  ingredients     IngredientsOnRecipe[]
  published       Boolean               @default(false)
  author          User                  @relation(fields: [authorId], references: [id])
  authorId        Int
  categories      CategoryOnRecipe[]
}

model ImageOnRecipe {
  image    Image  @relation(fields: [imageId], references: [id])
  imageId  Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int

  

  @@id([imageId, recipeId])
}

model Image {
  id            Int             @id @default(autoincrement())
  url           String
  publicId      String
  recipes       ImageOnRecipe[]
  featuredImages Recipe[]
}

model Category {
  id      Int                @id @default(autoincrement())
  name    String             @unique
  slug    String             @unique
  recipes CategoryOnRecipe[]
}

model CategoryOnRecipe {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   Int

  @@id([categoryId, recipeId])
}

model Ingredient {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  name      String                @unique
  recipes   IngredientsOnRecipe[]
}

model IngredientsOnRecipe {
  amount       String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int

  @@id([recipeId, ingredientId])
}
